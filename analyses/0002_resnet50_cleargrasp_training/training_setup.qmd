---
title: "Setup Pre-Training ResNet50 Model"
date: 05-10-2024
date-format: short
---

### Purpose:
Before training, the model must be loaded. 

#### Imports:
```{python}
import torch
import torch.nn as nn
import torch.optim as optim
from lib.ResNet101 import ResNet, ResNet101
```

#### Main
```{python}
if __name__ == "__main__":
    model_dir = 'resnet50-11ad3fa6.pth'
    model = get_ResNet(model_dir, BatchNorm=nn.BatchNorm2d, pretrained=True, output_stride=8)
    input = torch.rand(1, 3, 512, 512)
    output, low_level_feat = model(input)
    print(output.size())
    print(low_level_feat.size())
    print(model)

    model.eval()  # or 
    model.train() # if training

#  Setup optimizer and learning rate scheduler
    optimizer = optim.SGD(model.parameters(), lr=0.5, momentum=0.9, weight_decay=2e-05)
    scheduler = CosineAnnealingLR(optimizer, T_max=600)

#  Loss function with label smoothing
    criterion = nn.CrossEntropyLoss(label_smoothing=0.1)

# Setup augmentations for training and validation
    train_transform = transforms.Compose([
        transforms.RandomResizedCrop(176),
        transforms.TrivialAugmentWide(),
        transforms.RandomApply([transforms.RandomErasing(p=0.1)], p=0.1),
        transforms.ToTensor(),
    ])

    val_transform = transforms.Compose([
        transforms.Resize(232),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
    ])
```